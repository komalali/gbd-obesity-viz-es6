{"version":3,"sources":["../../app/LinkedList.js"],"names":["Node","data","_data","_next","newNode","LinkedList","_head","_length","index","currentNode","head","count","length","next","previousNode","_get","insert","remove","printList","myList","append","console","log","pop"],"mappings":";;;;;;AAAA;;IAEMA,I;AACF,kBAAYC,IAAZ,EAAkB;AAAA;;AACd,aAAKC,KAAL,GAAaD,IAAb;AACA,aAAKE,KAAL,GAAa,IAAb;AACH;;;;4BACU;AACP,mBAAO,KAAKD,KAAZ;AACH;;;4BACU;AACP,mBAAO,KAAKC,KAAZ;AACH,S;0BACQC,O,EAAS;AACd,iBAAKD,KAAL,GAAaC,OAAb;AACH;;;;;;IAGCC,U;AACF,0BAAc;AAAA;;AACV,aAAKC,KAAL,GAAa,IAAb;AACA,aAAKC,OAAL,GAAe,CAAf;AACH;;;;6BAUIC,K,EAAO;AACR,gBAAIC,cAAc,KAAKC,IAAvB;AACA,gBAAIC,QAAQ,CAAZ;;AAEA,gBAAIH,QAAQ,KAAKI,MAAjB,EAAyB;AACrB,oDAAkCJ,KAAlC;AACH;AACD,mBAAOG,QAAQH,KAAf,EAAsB;AAClBC,8BAAcA,YAAYI,IAA1B;AACAF;AACH;AACD,mBAAOF,WAAP;AACH;;;+BACMD,K,EAAOP,I,EAAM;AAChB,gBAAMa,eAAe,KAAKC,IAAL,CAAUP,QAAQ,CAAlB,CAArB;AACA,gBAAMC,cAAc,KAAKM,IAAL,CAAUP,KAAV,CAApB;AACA,gBAAMJ,UAAU,IAAIJ,IAAJ,CAASC,IAAT,CAAhB;;AAEAa,yBAAaD,IAAb,GAAoBT,OAApB;AACAA,oBAAQS,IAAR,GAAeJ,WAAf;AACH;;;+BACMR,I,EAAM;AACT,gBAAMQ,cAAc,KAAKG,MAAzB;AACH;;;8BACKX,I,EAAM;AACR,iBAAKe,MAAL,CAAY,CAAZ,EAAef,IAAf;AACH;;;4BACGO,K,EAAO;AACP,iBAAKS,MAAL,CAAYT,KAAZ;;AAEA,gBAAMC,cAAc,KAAKM,IAAL,CAAUP,KAAV,CAApB;AACA,mBAAOC,YAAYR,IAAnB;AACH;;;+BACMO,K,EAAO;;AAEV,gBAAMM,eAAe,KAAKC,IAAL,CAAUP,QAAQ,CAAlB,CAArB;AACAM,yBAAaD,IAAb,GAAoB,KAAKE,IAAL,CAAUP,QAAQ,CAAlB,CAApB;AACH;;;oCACW;AACR,gBAAIU,YAAY,GAAhB;AACA,gBAAIT,cAAc,KAAKC,IAAvB;AACA,gBAAI,CAACD,WAAL,EAAkB;AACd,uBAAO,gCAAP;AACH,aAFD,MAEO;AACH,uBAAOA,YAAYI,IAAnB,EAAyB;AACrBK,iCAAgBT,YAAYR,IAA5B;AACAQ,kCAAcA,YAAYI,IAA1B;AACH;AACDK,6BAAgBT,YAAYR,IAA5B;AACA,uBAAOiB,SAAP;AACH;AACJ;;;kCACS,CAET;;;4BA/DU;AACP,mBAAO,KAAKZ,KAAZ;AACH,S;0BAIQL,I,EAAM;AACX,iBAAKK,KAAL,GAAaL,IAAb;AACH;;;4BALY;AACT,mBAAO,KAAKM,OAAZ;AACH;;;;;;AA6DL,IAAIY,SAAS,IAAId,UAAJ,EAAb;AACAc,OAAOC,MAAP,CAAc,KAAd;AACAD,OAAOC,MAAP,CAAc,KAAd;AACAD,OAAOC,MAAP,CAAc,KAAd;AACAD,OAAOH,MAAP,CAAc,CAAd,EAAiB,MAAjB;AACAK,QAAQC,GAAR,CAAYH,OAAOD,SAAP,EAAZ;AACAG,QAAQC,GAAR,CAAYH,OAAOI,GAAP,CAAW,CAAX,CAAZ;AACAF,QAAQC,GAAR,CAAYH,OAAOD,SAAP,EAAZ","file":"LinkedList.js","sourcesContent":["// LinkedList.js\n\nclass Node {\n    constructor(data) {\n        this._data = data;\n        this._next = null;\n    }\n    get data() {\n        return this._data;\n    }\n    get next() {\n        return this._next;\n    }\n    set next(newNode) {\n        this._next = newNode;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        this._head = null;\n        this._length = 0;\n    }\n    get head() {\n        return this._head;\n    }\n    get length() {\n        return this._length;\n    }\n    set head(data) {\n        this._head = data;\n    }\n    _get(index) {\n        let currentNode = this.head;\n        let count = 0;\n\n        if (index > this.length) {\n            return `Nothing exists at index ${index}.`\n        }\n        while (count < index) {\n            currentNode = currentNode.next;\n            count++;\n        }\n        return currentNode;\n    }\n    insert(index, data) {\n        const previousNode = this._get(index - 1);\n        const currentNode = this._get(index);\n        const newNode = new Node(data);\n\n        previousNode.next = newNode;\n        newNode.next = currentNode;\n    }\n    append(data) {\n        const currentNode = this.length\n    }\n    shift(data) {\n        this.insert(0, data);\n    }\n    pop(index) {\n        this.remove(index);\n\n        const currentNode = this._get(index);\n        return currentNode.data;\n    }\n    remove(index) {\n\n        const previousNode = this._get(index - 1);\n        previousNode.next = this._get(index + 1);\n    }\n    printList() {\n        let printList = '[';\n        let currentNode = this.head;\n        if (!currentNode) {\n            return('There\\'s nothing in your list!');\n        } else {\n            while (currentNode.next) {\n                printList += `${currentNode.data}, `;\n                currentNode = currentNode.next;\n            }\n            printList += `${currentNode.data}]`;\n            return printList;\n        }\n    }\n    reverse() {\n\n    }\n}\n\nlet myList = new LinkedList();\nmyList.append('foo');\nmyList.append('bar');\nmyList.append('baz');\nmyList.insert(1, 'bums');\nconsole.log(myList.printList());\nconsole.log(myList.pop(2));\nconsole.log(myList.printList());"]}